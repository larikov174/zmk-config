/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt {
    quick_tap_ms = <200>;
    tapping-term-ms = <150>;
    flavor = "hold-preferred";
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_CUT";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(X)>;
        };

        home_row: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <(-1)>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <16 15 14 13 19 20 21 22>;
        };

        tap_dance: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&none>, <&none>;
        };
    };

    macros {
        comma_ru: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT &kp SPACE>;
            label = "COMMA_SPACE";
        };

        dot_ru: dot_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(KP_DOT) &kp SPACE>;
            label = "DOT_RU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp LA(LG(I))  &kp Q  &kp W    &kp E                    &kp R             &kp T        &kp Y            &kp U           &kp I             &kp O    &kp P     &none
&none          &kp A  &lt 3 S  &mt LEFT_SHIFT D         &mt LEFT_ALT F    &kp G        &kp H            &mt LEFT_ALT J  &mt LEFT_SHIFT K  &kp L    &kp SEMI  &none
&none          &kp Z  &kp X    &kp C                    &kp V             &kp B        &kp N            &kp M           &kp COMMA         &kp DOT  &kp FSLH  &none
                               &mt LEFT_CONTROL ESCAPE  &kp LEFT_COMMAND  &lt 1 SPACE  &lt 2 BACKSPACE  &kp ENTER       &kp TAB
            >;
        };

        NAV {
            bindings = <
&none  &none  &none  &none           &none         &none  &none                   &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &kp LBKT  &none
&none  &none  &none  &kp LEFT_SHIFT  &kp LEFT_ALT  &none  &kp LEFT_ARROW          &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT_ARROW      &kp APOS  &none
&none  &none  &none  &none           &none         &none  &kp GRAVE               &none               &comma_ru         &dot_ru              &none     &none
                     &none           &none         &none  &mt LEFT_COMMAND LC(L)  &none               &none
            >;
        };

        NUM {
            bindings = <
&none  &none  &mt LS(N7) N7        &mt LS(N8) N8  &mt LS(N9) N9  &mt LS(MINUS) MINUS  &kp C_VOLUME_UP    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none  &none  &none
&none  &none  &mt LS(N4) NUMBER_4  &mt LS(N5) N5  &mt LS(N6) N6  &mt LS(EQUAL) EQUAL  &kp C_VOLUME_DOWN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &none  &none  &none
&none  &none  &mt LS(N1) NUMBER_1  &mt LS(N2) N2  &mt LS(N3) N3  &kp PIPE             &none              &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none  &none  &none
                                   &none          &mt LS(N0) N0  &kp LEFT_COMMAND     &none              &none                 &none
            >;
        };

        OTHER {
            bindings = <
&none  &none  &none  &kp PAGE_UP    &kp LS(LC(LG(NUMBER_4)))  &kp LS(LG(NUMBER_4))  &none  &none  &none  &none  &none  &none
&none  &none  &none  &kp PAGE_DOWN  &kp LG(Z)                 &none                 &none  &none  &none  &none  &none  &none
&none  &none  &none  &none          &none                     &none                 &none  &none  &none  &none  &none  &none
                     &none          &none                     &none                 &none  &none  &none
            >;
        };
    };
};
